<?php

/**
 * @file
 * Contains hook implementations for Parade.
 *
 * @todo Make the whole thing dynamic, do not rely on Parade content type.
 */

use Drupal\Core\Form\FormState;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_preprocess_paragraph().
 */
function parade_preprocess_paragraph(&$variables) {
  /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = &$variables['paragraph'];

  if (!method_exists($paragraph, 'getType')) {
    return;
  }

  // Attach libraries for each paragraph type.
  $variables['#attached']['library'][] = 'parade/paragraphs.' . $paragraph->getType();

  if (!method_exists($paragraph, 'hasField')) {
    return;
  }

  // Pass the Anchor field value for the template.
  if ($paragraph->hasField('field_anchor') && $anchor = $paragraph->get('field_anchor')->value) {
    $variables['attributes']['id'] = Html::getId($anchor);
  }

  // Pass the Layout field values to each corresponding Paragraph.
  // @todo Refactor!
  $layouts = [
    'field_image_text_layout' => [
      0 => 'image_1st',
      1 => 'text_1st',
      2 => 'text_1st_enhanced',
    ],
    'field_simple_layout' => [
      0 => 'one-column-clean',
      1 => 'one-column-grey',
      2 => 'one-column-shaded',
      3 => 'two-column-title-1st-inverse',
      4 => 'two-column-content-1st-inverse',
      5 => 'separator-clean',
    ],
    'field_text_boxes_layout' => [
      0 => 'none',
      1 => 'smallinfo',
      2 => 'lot_infos',
      3 => 'lot_infos-grey',
      4 => 'text_icon',
      5 => 'rounded_image',
      6 => 'contacts',
    ],
    'field_text_box_layout' => [
      0 => 'normal',
      1 => 'blue',
      2 => 'red',
      3 => 'orange',
      4 => 'green',
    ],
  ];

  // Set CSS class for the selected layout.
  foreach ($layouts as $field => $classes) {
    if ($paragraph->hasField($field)) {
      if ($paragraph->{$field}->value === NULL) {
        $variables['attributes']['class'][] = 'layout--none';
      }
      elseif (isset($classes[$paragraph->{$field}->value])) {
        $variables['attributes']['class'][] = 'layout--' . $classes[$paragraph->{$field}->value];
      }
    }
  }

  // Parallax and background stuff for Header and Parallax types.
  if (
    $paragraph->hasField('field_background') &&
    in_array($paragraph->getType(), ['header', 'parallax'], FALSE)
  ) {
    $target_id = $paragraph->get('field_background')->target_id;
    if (!$target_id) {
      return;
    }

    // Get background file info.
    $file = File::load($target_id);
    if (is_object($file)) {
      $file_uri = $file->getFileUri();
      $file_mime = $file->getMimeType();
      $file_path = parse_url(file_create_url($file_uri))['path'];

      // Attach parallax library if the user enabled the effect.
      if ($paragraph->hasField('field_enable_parallax') && TRUE == $paragraph->get('field_enable_parallax')->value) {
        $variables['#attached']['library'][] = 'parade/parallax';
      }

      // @todo Maybe use this...?
      //
      // @code
      // if (isset($vars['elements']['field_video'])) {
      //   $video_path = $vars['elements']['field_video'][0]['#markup'];
      //   $vars['video'] = array(
      //   'path' => file_create_url($video_path),
      //   'mime' => Drupal::service('file.mime_type.guesser')
      //                ->guess($video_path)
      //   );
      // }
      // @endcode
      // Image is the default.
      $type = 'image';

      // Compress images with an image style,
      // if Image Optimalization is enabled.
      if (
        $file_mime === 'image/jpeg' &&
        \Drupal::service('module_handler')->moduleExists('image_optimalization')
      ) {
        /** @var Drupal\image\Entity\ImageStyle $style */
        $style = ImageStyle::load('parade_full_hd_width');
        $file_path = $style->buildUrl($file_uri);
      }
      elseif (in_array($file_mime, [
        'video/mp4',
        'application/mp4',
        'video/webm',
      ])) {
        $type = 'video';
        // Attach video related libraries.
        $variables['#attached']['library'][] = 'parade/inline-video';
      }

      // Check field_enable_parallax field.
      $enable_parallax = $paragraph->hasField('field_enable_parallax') ? $paragraph->get('field_enable_parallax')->value : FALSE;

      // Add variables to theme.
      _parade_add_template_variable($variables, [
        'background' => [
          'type' => $type,
          'url' => $file_path,
          'mime' => $file_mime,
        ],

        'enable_parallax' => $enable_parallax,
      ]);
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__text_box().
 */
function parade_preprocess_paragraph__text_box(&$variables) {
  /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = &$variables['paragraph'];
  /** @var Drupal\paragraphs\Entity\Paragraph $parent */
  $parent = $paragraph->getParentEntity();

  // Pass the number of Columns field value.
  if (method_exists($parent, 'hasField') && $parent->hasField('field_boxes_per_row') && ($columns = $parent->get('field_boxes_per_row')->value)) {
    _parade_add_template_variable($variables, [
      'columns' => $columns,
    ]);
  }
}

/**
 * Implements hook_preprocess_paragraph__text_boxes().
 */
function parade_preprocess_paragraph__text_boxes(&$variables) {
  /** @var Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = &$variables['paragraph'];

  // Pass the number of Columns field value.
  if ($columns = $paragraph->get('field_boxes_per_row')->value) {
    _parade_add_template_variable($variables, [
      'columns' => $columns,
    ]);
  }
}

/**
 * Implements hook_theme().
 */
function parade_theme($existing, $type, $theme, $path) {
  return [
    'paragraph' => [],
    'paragraph__header' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__parallax' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__simple' => [
      'template' => 'paragraph',
      'base hook' => 'paragraph',
    ],
    'paragraph__text_box' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__text_boxes' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__images' => [
      'template' => 'paragraph',
      'base hook' => 'paragraph',
    ],
    'paragraph__image_text' => [
      'template' => 'paragraph',
      'base hook' => 'paragraph',
    ],
    'paragraph__locations' => [
      'template' => 'paragraph',
      'base hook' => 'paragraph',
    ],
    'paragraph__social_links' => [
      'template' => 'paragraph',
      'base hook' => 'paragraph',
    ],
    'parade_preview' => [
      'variables' => ['paragraph' => NULL],
    ],
  ];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function parade_theme_suggestions_page_alter(&$suggestions, $variables) {
  // Add content type suggestions based on machine_name field and content type.
  // e.g. page--node--parade.html.twig
  // page--node--parade--my-awesome-page.html.twig.
  // @todo Check for any nodes which has Parade field (entity_revisions_paragraphs_preview).
  $attributes = Drupal::request()->attributes;
  if (!$attributes->has('_entity_form') && $attributes->get('_entity_form') !== "node.edit" && $node = $attributes->get('node')) {
    $type = (is_object($node) && method_exists($node, 'getType')) ? $node->getType() : 'parade';
    array_unshift($suggestions, 'page__node__' . $type);
    if (method_exists($node, 'hasField') && $node->hasField('field_machine_name')) {
      if ($machine_name = $node->get('field_machine_name')->value) {
        $suggestions[] = 'page__node__' . $type . '__' . $machine_name;
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function parade_theme_suggestions_paragraph_alter(array &$suggestions, array $variables) {
  // Add custom suggestions for Paragraph types with machine name.
  // @todo Check for any nodes which has Parade field (entity_revisions_paragraphs_preview).
  $attributes = Drupal::request()->attributes;
  $node = $attributes->get('node');
  if (
    !$attributes->has('_entity_form') &&
    $attributes->get('_entity_form') !== "node.edit" &&
    $attributes->has('node') &&
    method_exists($node, 'hasField') &&
    $node->hasField('field_machine_name')
  ) {
    if (is_object($node) && ($machine_name = $node->get('field_machine_name')->value)) {
      /** @var string[] $suggestions */
      $parade_suggestions = [];
      foreach ($suggestions as $suggestion) {
        $parade_suggestions[] = preg_replace("/^paragraph__/", 'paragraph__' . $machine_name . "__", $suggestion);
      }
      $suggestions = array_merge($suggestions, $parade_suggestions);
    }
  }
}

/**
 * Populates TWIG variables with Parade related data.
 *
 * E.g.: $variables['parade']['test'] becomes
 * {{ parade.test }} in the templates.
 *
 * @param array &$variables
 *   The core $variables passed by reference.
 * @param array $data
 *   New data in array format, which will be passed to the template.
 *
 * @return bool|array
 *   The new data.
 *
 * @internal
 */
function _parade_add_template_variable(array &$variables, array $data = NULL) {
  if (!$data) {
    return FALSE;
  }

  // Array root of Parade related data in TWIG.
  // Example usage:
  // {{ parade.background.url }}
  // {{ parade.layout }}.
  static $key = 'parade';

  if (!isset($variables[$key])) {
    $variables[$key] = $data;
  }
  else {
    $variables[$key][] = $data;
  }

  return $data;
}

/**
 * Implements hook_form_alter().
 *
 * Modify "Add sections".
 */
function parade_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Modify the Paragraphs field.
  // @todo Check the field formatter instead!
  /** @var FormStateInterface $form */
  if (isset($form['field_paragraphs'])) {
    $form['#attached']['library'][] = 'parade/buttons';

    foreach ($form['field_paragraphs']['widget']['add_more'] as $key => $item) {
      if (strpos($key, 'add_more') === FALSE) {
        continue;
      }
      $type = Html::getClass($item['#bundle_machine_name']);
      $form['field_paragraphs']['widget']['add_more'][$key]['#attributes']['class'][] = 'parade-button';
      $form['field_paragraphs']['widget']['add_more'][$key]['#attributes']['class'][] = 'parade-button-' . $type;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function parade_preprocess_field__field_social_link(&$variables) {
  // @todo @fixme Sad but true.
  foreach ($variables['items'] as $key => $link) {
    if (strpos($link['content']['#title'], 'facebook') !== FALSE) {
      $type = 'facebook';
    }
    elseif (strpos($link['content']['#title'], 'twitter') !== FALSE) {
      $type = 'twitter';
    }
    elseif (strpos($link['content']['#title'], 'google') !== FALSE) {
      $type = 'google';
    }
    elseif (strpos($link['content']['#title'], 'linkedin') !== FALSE) {
      $type = 'linkedin';
    }
    elseif (strpos($link['content']['#title'], 'youtube') !== FALSE) {
      $type = 'youtube';
    }
    else {
      $type = 'unknown';
    }
    $variables['items'][$key]['content']['#options']['attributes']['class'] = [
      'social',
      'social-' . $type,
    ];
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Move Parade domain front fields to an advanced tab like other node settings.
 */
function parade_form_node_form_alter(&$form, FormState $form_state, $form_id) {
  if (isset($form['domain'])) {
    $module_handler = \Drupal::moduleHandler();
    if ($module_handler->moduleExists('domain') && $module_handler->moduleExists('domain_access') && $module_handler->moduleExists('domain_config')) {
      $default_value = [];
      $options = ['none' => t('None')->render()];
      $options_dyn = [];
      $config_factory = \Drupal::configFactory();
      $node = \Drupal::routeMatch()->getParameter('node');
      $path_array = ['alias'  => $node->toUrl()->toString(),
                     'source' => '/node/' . $node->id()
      ];
      $domains = \Drupal::service('domain.loader')->loadMultiple();
      foreach ($domains as $domain) {
        $key = $domain->id();
        $options_dyn[$key] = $domain->get('name');

        $front_url = $config_factory->get('domain.config.' . $key . '.system.site')
          ->get('page.front');
        if ($front_url == $path_array['alias'] || $front_url == $path_array['source']) {
          $default_value[] = $key;
        }
      }
      asort($options_dyn);
      $options += $options_dyn;
      if (empty($default_value)) {
        $default_value[] = 'none';
      }

      // Put out checkboxes for front page selection.
      $form['field_domains_front_page'] = [
        '#type'              => 'container',
        '#parents'           => [
          'field_domain_front_page_wrapper',
        ],
        'domains_front_page' => [
          '#type'          => 'checkboxes',
          '#title'         => t('Select which domains\' frontpage will be this node'),
          '#options'       => $options,
          '#cache'         => [
            'contexts' => [],
            'tags'     => [],
            'max-age'  => -1,
          ],
          '#attributes'    => [
            'class' => [
              'field--type-entity-reference',
              'field--name-field-domain-front-page',
              'field--widget-options-buttons',
            ],
          ],
          '#field_name'    => 'domains_front_page',
          '#default_value' => $default_value,
        ],
        '#group'             => "domain",
        '#weight'            => 50,
        '#access'            => TRUE,
      ];

      // Set a custom submit function
      $form['actions']['submit']['#submit'][] = 'parade_domain_front_page_form_submit_handler';
      $form['actions']['publish']['#submit'][] = 'parade_domain_front_page_form_submit_handler';
      $form['actions']['unpublish']['#submit'][] = 'parade_domain_front_page_form_submit_handler';
    }
  }
}

/**
 * Custom form action handler.
 *
 * This sets front page values.
 */
function parade_domain_front_page_form_submit_handler($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  if($form_state->hasValue('domains_front_page')) {
    $domains = $form_state->getValue('domains_front_page');
    $path_array = reset($form_state->getValue('path'));
    $path = $path_array['alias'] ? $path_array['alias'] : $path_array['source'];

    if (!empty($domains['none'])) {
      parade_delete_all_domain_front_page($path_array);
    }
    else {
      unset($domains['none']);
      $config_factory = \Drupal::configFactory();
      foreach ($domains as $key => $value) {
        if (empty($value)) {
          $conf_path = $config_factory->get('domain.config.' . $key . '.system.site')
            ->get('page.front');
          if ($conf_path == $path_array['alias'] || $conf_path == $path_array['source']) {
            $config_factory->getEditable('domain.config.' . $key . '.system.site')
              ->set('page.front', '/')
              ->save();
          }
        }
        else {
          $config_factory->getEditable('domain.config.' . $key . '.system.site')
            ->set('page.front', $path)
            ->save();
        }
      }
    }
  }
}

/**
 * Delete all domains' front pages.
 *
 * @param $path_array
 *   A path array with an alias and a source key.
 *
 * @use
 *   Domain.
 */
function parade_delete_all_domain_front_page($path_array) {
  $domains = \Drupal::service('domain.loader')->loadMultiple();

  $config_factory = \Drupal::configFactory();
  foreach (array_keys($domains) as $domain_id) {
    $conf_path = $config_factory->get('domain.config.' . $domain_id . '.system.site')->get('page.front');
    if ($conf_path == $path_array['alias'] || $conf_path == $path_array['source']) {
      $config_factory->getEditable('domain.config.' . $domain_id . '.system.site')
        ->set('page.front', '/')
        ->save();
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete() for node entities.
 *
 * Delete front page link if node is delete.
 *
 * @use
 *   Domain.
 */
function parade_node_delete(EntityInterface $node) {
  $domains = \Drupal::service('domain.loader')->loadMultiple();
  $path_array = ['alias' => $node->toUrl()->toString(), 'source' => '/node/'.$node->id()];

  $config_factory = \Drupal::configFactory();
  foreach (array_keys($domains) as $domain_id) {
    $conf_path = $config_factory->get('domain.config.' . $domain_id . '.system.site')->get('page.front');
    if ($conf_path == $path_array['alias'] || $conf_path == $path_array['source']) {
      $config_factory->getEditable('domain.config.' . $domain_id . '.system.site')
        ->set('page.front', '/')
        ->save();
    }
  }
}
