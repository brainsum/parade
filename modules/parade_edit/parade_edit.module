<?php

/**
 * @file
 * Code for Parade Edit.
 */

use Drupal\parade_edit\Plugin\Menu\ViewTab;
use Drupal\parade_edit\Plugin\Menu\EditTab;
use Drupal\parade_edit\Plugin\Menu\ParadeEditorTab;
use Drupal\Core\Form\FormStateInterface;
use Drupal\geysir\Form\GeysirParagraphForm;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\geysir\Ajax\GeysirCloseModalDialogCommand;

/**
 * Implements hook_page_attachments_alter().
 *
 * Disable Quick edit functionality on node/ID page.
 */
function parade_edit_page_attachments_alter(array &$attachments) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() === 'entity.node.canonical') {
    if ($index = array_search('quickedit/quickedit', $attachments['#attached']['library'])) {
      unset($attachments['#attached']['library'][$index]);
    }
    if ($index = array_search('contextual/drupal.contextual-links', $attachments['#attached']['library'])) {
      unset($attachments['#attached']['library'][$index]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Using hook_preprocess_field().
 * Disable Geysir functionality on node/ID page and for nested paragraphs.
 */
function parade_edit_preprocess_field(&$vars) {
  if (empty($vars['field_type']) || $vars['field_type'] !== 'entity_reference_revisions') {
    return;
  }

  if (isset($vars['attributes']['data-geysir-field-paragraph-field-wrapper'])) {
    $disable_geysir = FALSE;
    $route_match = \Drupal::routeMatch();
    if (in_array($route_match->getRouteName(), [
      'entity.node.canonical',
      'geysir.modal.edit_form',
      'entity.node.latest_version',
      'geysir.modal.up',
      'geysir.modal.down',
    ])) {
      // Disable on node view.
      if ($route_match->getRouteName() === 'entity.node.canonical') {
        unset($vars['attributes']['data-geysir-field-paragraph-field-wrapper']);
        $disable_geysir = TRUE;
      }
      $element = &$vars['element'];
      $delta = 0;
      while (!empty($element[$delta])) {
        // Disable on node view and for parade_paragraphs nested field.
        if ($disable_geysir || $vars['field_name'] === 'parade_paragraphs') {
          if (($key = array_search('geysir_field_paragraph_wrapper', $vars['items'][$delta]['content']['#theme_wrappers'])) !== FALSE) {
            unset($vars['items'][$delta]['content']['#theme_wrappers'][$key]);
          }
          unset($vars['items'][$delta]['content']['#geysir_field_paragraph_links']);
        }
        $delta++;
      }
    }
  }
}

/**
 * Implements hook_library_info_alter().
 */
function parade_edit_library_info_alter(&$libraries, $extension) {
  // TODO: rewrite this and patch geyzir, do this with service.
  if ($extension == "geysir") {
    // Remove useless css. This will prevent to overwrite css rules.
    $libraries['paragraphs']['css'] = [];
  }
  elseif ($extension == "bartik") {
    $route_name = \Drupal::routeMatch()->getRouteName();
    if (in_array($route_name, ['entity.node.canonical', 'entity.node.latest_version'])) {
      unset($libraries['global-styling']['css']['component']['css/components/tabs.css']);
    }
  }
  elseif ($extension == "seven") {
    $route_name = \Drupal::routeMatch()->getRouteName();
    if (in_array($route_name, ['entity.node.edit_form'])) {
      unset($libraries['global-styling']['css']['component']['css/components/tabs.css']);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function parade_edit_preprocess_node(&$variables) {
  // Remove Work moderation control form from the last version page...
  if (\Drupal::routeMatch()->getRouteName() === "entity.node.latest_version") {
    $variables['content']['_field_layout']['content']['workbench_moderation_control']['#access'] = FALSE;

    // Just attach to this page's content our geysir styles.
    // TODO: rewrite this and patch geyzir, do this with service.
    $variables['content']['_field_layout']['content']['#attached']['library'][] = 'parade_edit/paragraphs';

    // Add our quick edit js.
    $variables['#attached']['library'][] = 'parade_edit/quickedit';
  }
}

/**
 * Implements hook_local_tasks_alter().
 *
 * Alter View, Edit, Latest version TABs for nodes.
 */
function parade_edit_local_tasks_alter(&$local_tasks) {
  // View, Edit, Latest version TAB rename for our bundles.
  $local_tasks['entity.node.canonical']['class'] = ViewTab::class;
  $local_tasks['entity.node.canonical']['entity_type_id'] = 'node';

  $local_tasks['entity.node.edit_form']['class'] = EditTab::class;
  $local_tasks['entity.node.edit_form']['entity_type_id'] = 'node';
  $local_tasks['entity.node.edit_form']['weight'] = -1.1;

  $local_tasks['moderation_state.entities:node.latest_version_tab']['class'] = ParadeEditorTab::class;
  $local_tasks['moderation_state.entities:node.latest_version_tab']['entity_type_id'] = 'node';
  $local_tasks['moderation_state.entities:node.latest_version_tab']['weight'] = -1;
}

/**
 * Implements hook_form_alter().
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function parade_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof GeysirParagraphForm && 'geysir_modal_edit' === $form_object->getOperation()) {
    if (isset($form['actions']['submit'])) {
      $route_match = \Drupal::routeMatch();
      $parent_entity_type = $route_match->getParameter('parent_entity_type');
      $temporary_data = $form_state->getTemporary();
      $parent_entity_revision_id = isset($temporary_data['parent_entity_revision']) ?
        $temporary_data['parent_entity_revision'] : $route_match->getParameter('parent_entity_revision');
      $parent_entity_revision = \Drupal::entityTypeManager()
        ->getStorage($parent_entity_type)
        ->loadRevision($parent_entity_revision_id);
      $state = $parent_entity_revision->moderation_state->target_id;
      $form['actions']['submit']['#value'] = t('Save as @state', ['@state' => $state]);
      $form['actions']['submit']['#attributes']['class'][] = "parade_edit parade_edit-$state";
    }
    if (!isset($form['actions']['cancel'])) {
      $form['actions']['cancel'] = [
        '#type' => 'button',
        '#value' => t('Cancel'),
        '#ajax' => [
          'callback' => '_parade_edit_geysir_ajax_cancel',
          'event' => 'click',
        ],
        '#weight' => isset($form['actions']['submit']['#weight']) ? $form['actions']['submit']['#weight'] + 1 : 0,
        '#attributes' => ['class' => ["parade_edit parade_edit-cancel"]],
      ];
    }

    // Add class to edit forms.
    // @refactor - extend GeysirModalParagraphForm:buildform
    if (!isset($form['#attributes'])) {
      $form['#attributes'] = ['class' => []];
    }
    elseif (!isset($form['#attributes']['class'])) {
      $form['#attributes']['class'] = [];
    }
    $form['#attributes']['class'][] = 'node-parade-onepage-edit-form';
    $form['#attributes']['class'][] = 'node-form';
    $form['#attributes']['class'][] = 'node-parade-onepage-form';

    // Add custom prefix, parade_icon.
    $paragraphs_entity = $node = $form_state->getFormObject()->getEntity();
    $label = $paragraphs_entity->type->entity->label();
    $bundle = $paragraphs_entity->getType();
    $form['#attributes']['class'][] = 'node-parade-onepage-form item-mode-edit';
    $form['parade_icon'] = [
      '#markup' => '<div class="paragraphs-type paragraphs-type-' . $bundle . '">' . $label . '</div>',
      '#weight' => -1,
    ];

    $form['#prefix'] = '<div id="geysir-modal-form" class="paragraphs-wrapper-bundle-' . $bundle . '">';
  }
}

/**
 * Ajax callbcak for cancel button in geysir modal.
 *
 * @see parade_edit_form_paragraph_simple_geysir_modal_edit_form_alter
 */
function _parade_edit_geysir_ajax_cancel(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $response->addCommand(new GeysirCloseModalDialogCommand());
  return $response;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @todo - refactor.
 */
function parade_edit_preprocess_links(&$variables) {
  if (isset($variables['attributes']['class']) && in_array('geysir-field-paragraph-links', $variables['attributes']['class'])) {
    $new_links = [];
    foreach ($variables['links'] as $key => $link) {
      $new_links[$key] = $link;
      if ('edit' === $key) {
        $my_link['links']['parade_edit-quickedit'] = [
          'title' => 'Inplace edit',
          'attributes' => [
            'class' => ['button', 'geysir-button'],
          ],
        ];
        template_preprocess_links($my_link);
        $new_links['parade_edit-quickedit'] = $my_link['links']['parade_edit-quickedit'];
      }
    }
    $variables['links'] = $new_links;
  }
}

/**
 * Implements hook_page_attachments().
 */
function parade_edit_page_attachments(array &$page) {
  $attributes = Drupal::request()->attributes;
  if (in_array($attributes->get('_route'), ['entity.node.canonical', 'entity.node.edit_form', 'entity.node.latest_version'])) {
    $page['#attached']['library'][] = 'parade_edit/tabs';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function parade_edit_preprocess_menu_local_task(&$variables) {
  /* @var Drupal\Core\Url $url */
  $url = $variables['link']['#url'];
  switch ($url->getRouteName()) {
    case "entity.node.canonical":
      $variables['attributes']['class'][] = 'view';
      $variables['attributes']['class'][] = 'bordered';
      break;

    case "entity.node.edit_form":
      $variables['attributes']['class'][] = 'normal-edit';
      $variables['attributes']['class'][] = 'bordered';
      break;

    case "entity.node.latest_version":
      $variables['attributes']['class'][] = 'geysir-edit';
      $variables['attributes']['class'][] = 'bordered';
      break;
  }
}
