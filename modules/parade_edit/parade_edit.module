<?php

/**
 * @file
 * Code for Parade Edit.
 */

use Drupal\parade_edit\Plugin\Menu\ViewTab;
use Drupal\parade_edit\Plugin\Menu\EditTab;
use Drupal\parade_edit\Plugin\Menu\ParadeEditorTab;
use Drupal\Core\Form\FormStateInterface;
use Drupal\geysir\Form\GeysirParagraphForm;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\geysir\Ajax\GeysirCloseModalDialogCommand;
use Drupal\Core\Url;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;

/**
 * Implements hook_entity_type_build().
 */
function parade_edit_entity_type_build(array &$entity_types) {
  // Add custom form display for preferences modal.
  $node_type = $entity_types['node'];
  $node_type->setFormClass('preferences', '\Drupal\parade_edit\Form\ParadeEditModalPreferencesForm');

  // Override Geysir forms to our.
  $entity_types['paragraph']->setFormClass('geysir_modal_edit', '\Drupal\parade_edit\Form\ParadeEditGeysirModalParagraphForm');
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Disable Quick edit functionality on node/ID page.
 *
 * @todo - check parade_demo enabled bundles.
 */
function parade_edit_page_attachments_alter(array &$attachments) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() === 'entity.node.canonical') {
    if ($index = array_search('quickedit/quickedit', $attachments['#attached']['library'])) {
      unset($attachments['#attached']['library'][$index]);
    }
    if ($index = array_search('contextual/drupal.contextual-links', $attachments['#attached']['library'])) {
      unset($attachments['#attached']['library'][$index]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add custom class to body element, on latest TAB.
 *
 * @todo - check parade_demo enabled bundles.
 */
function parade_edit_preprocess_html(&$variables) {
  if ('entity.node.latest_version' === \Drupal::routeMatch()->getRouteName()) {
    $variables['attributes']['class'][] = 'parade-edit-latest';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Using hook_preprocess_field().
 * Disable quick edit for some field.
 * Disable Geysir functionality on node/ID page and for nested paragraphs.
 */
function parade_edit_preprocess_field(&$vars) {
  // Disable quick edit for some fields.
  $disable_quickedit = [
    'parade_paragraphs',
    'parade_call_to_action',
    'parade-images',
    'parade_geofield',
    'parade_social_link',
  ];
  if (isset($vars['attributes']['data-quickedit-field-id']) && in_array($vars['field_name'], $disable_quickedit)) {
    unset($vars['attributes']['data-quickedit-field-id']);
  }

  if (empty($vars['field_type']) || $vars['field_type'] !== 'entity_reference_revisions') {
    return;
  }

  if (isset($vars['attributes']['data-geysir-field-paragraph-field-wrapper'])) {
    $disable_geysir = FALSE;
    $route_match = \Drupal::routeMatch();
    if (in_array($route_match->getRouteName(), [
      'entity.node.canonical',
      'geysir.modal.edit_form',
      'entity.node.latest_version',
      'geysir.modal.up',
      'geysir.modal.down',
      'parade_edit.modal.preferences',
    ])) {
      // Disable on node view.
      if ($route_match->getRouteName() === 'entity.node.canonical') {
        unset($vars['attributes']['data-geysir-field-paragraph-field-wrapper']);
        $disable_geysir = TRUE;
      }
      $element = &$vars['element'];
      $delta = 0;
      while (!empty($element[$delta])) {
        // Disable on node view and for parade_paragraphs nested field.
        if ($disable_geysir || $vars['field_name'] === 'parade_paragraphs') {
          if (($key = array_search('geysir_field_paragraph_wrapper', $vars['items'][$delta]['content']['#theme_wrappers'])) !== FALSE) {
            unset($vars['items'][$delta]['content']['#theme_wrappers'][$key]);
          }
          unset($vars['items'][$delta]['content']['#geysir_field_paragraph_links']);
        }
        $delta++;
      }
    }
  }
}

/**
 * Implements hook_library_info_alter().
 */
function parade_edit_library_info_alter(&$libraries, $extension) {
  // TODO: rewrite this and patch geyzir, do this with service.
  if ($extension == "geysir") {
    // Remove useless css. This will prevent to overwrite css rules.
    $libraries['paragraphs']['css'] = [];
  }
  elseif ($extension == "bartik") {
    $route_name = \Drupal::routeMatch()->getRouteName();
    if (in_array($route_name, ['entity.node.canonical', 'entity.node.latest_version'])) {
      unset($libraries['global-styling']['css']['component']['css/components/tabs.css']);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function parade_edit_preprocess_node(&$variables) {
  // Add needed libraries.
  if (in_array(\Drupal::routeMatch()->getRouteName(), ['entity.node.latest_version', 'parade_edit.modal.preferences'])) {
    // Just attach to this page's content our geysir styles.
    // TODO: rewrite this and patch geyzir, do this with service.
    $variables['content']['_field_layout']['content']['#attached']['library'][] = 'parade_edit/paragraphs';
    // Add our quick edit js.
    $variables['#attached']['library'][] = 'parade_edit/quickedit';
  }
}

/**
 * Implements hook_entity_operation().
 */
function parade_edit_entity_operation(EntityInterface $entity) {
  return \Drupal::service('parade_edit.entity_type')->entityOperation($entity);
}

/**
 * Implements hook_entity_extra_field_info().
 */
function parade_edit_entity_extra_field_info() {
  return \Drupal::service('parade_edit.entity_type')->entityExtraFieldInfo();
}

/**
 * Implements hook_entity_view().
 */
function parade_edit_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  \Drupal::service('parade_edit.entity_operations')->entityView($build, $entity, $display, $view_mode);
}

/**
 * Implements hook_local_tasks_alter().
 *
 * Alter View, Edit, Latest version TABs for nodes.
 */
function parade_edit_local_tasks_alter(&$local_tasks) {
  // View, Edit, Latest version TAB rename for our bundles.
  $local_tasks['entity.node.canonical']['class'] = ViewTab::class;
  $local_tasks['entity.node.canonical']['entity_type_id'] = 'node';

  $local_tasks['entity.node.edit_form']['class'] = EditTab::class;
  $local_tasks['entity.node.edit_form']['entity_type_id'] = 'node';
  $local_tasks['entity.node.edit_form']['weight'] = -1.1;

  $local_tasks['moderation_state.entities:node.latest_version_tab']['class'] = ParadeEditorTab::class;
  $local_tasks['moderation_state.entities:node.latest_version_tab']['entity_type_id'] = 'node';
  $local_tasks['moderation_state.entities:node.latest_version_tab']['weight'] = -1;
}

/**
 * Implements hook_form_alter().
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function parade_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof GeysirParagraphForm && in_array($form_object->getOperation(), ['geysir_modal_add', 'geysir_modal_edit'])) {
    if (isset($form['actions']['submit'])) {
      $route_match = \Drupal::routeMatch();
      $parent_entity_type = $route_match->getParameter('parent_entity_type');
      $temporary_data = $form_state->getTemporary();
      $parent_entity_revision_id = isset($temporary_data['parent_entity_revision']) ?
        $temporary_data['parent_entity_revision'] : $route_match->getParameter('parent_entity_revision');
      $parent_entity_revision = \Drupal::entityTypeManager()
        ->getStorage($parent_entity_type)
        ->loadRevision($parent_entity_revision_id);
      $state = $parent_entity_revision->moderation_state->target_id;
      $form['actions']['submit']['#value'] = t('Save as @state', ['@state' => $state]);
      $form['actions']['submit']['#attributes']['class'][] = "parade_edit parade_edit-$state";
    }
    if (!isset($form['actions']['cancel'])) {
      $form['actions']['cancel'] = [
        '#type' => 'button',
        '#value' => t('Cancel'),
        '#ajax' => [
          'callback' => '_parade_edit_geysir_ajax_cancel',
          'event' => 'click',
        ],
        '#weight' => isset($form['actions']['submit']['#weight']) ? $form['actions']['submit']['#weight'] + 1 : 0,
        '#attributes' => ['class' => ["parade_edit parade_edit-cancel"]],
      ];
    }

    // Add class to edit forms.
    // @refactor - extend GeysirModalParagraphForm:buildform
    if (!isset($form['#attributes'])) {
      $form['#attributes'] = ['class' => []];
    }
    elseif (!isset($form['#attributes']['class'])) {
      $form['#attributes']['class'] = [];
    }
    $form['#attributes']['class'][] = 'node-parade-onepage-edit-form';
    $form['#attributes']['class'][] = 'node-form';
    $form['#attributes']['class'][] = 'node-parade-onepage-form';

    // Add custom prefix, parade_icon.
    $paragraphs_entity = $node = $form_state->getFormObject()->getEntity();
    $label = $paragraphs_entity->type->entity->label();
    $bundle = $paragraphs_entity->getType();
    $form['#attributes']['class'][] = 'node-parade-onepage-form item-mode-edit';
    $form['parade_icon'] = [
      '#markup' => '<div class="paragraphs-type paragraphs-type-' . $bundle . '">' . $label . '</div>',
      '#weight' => -1,
    ];

    $form['#prefix'] = '<div id="geysir-modal-form" class="paragraphs-wrapper-bundle-' . $bundle . '">';
  }
}

/**
 * Ajax callbcak for cancel button in geysir modal.
 *
 * @see parade_edit_form_paragraph_simple_geysir_modal_edit_form_alter
 */
function _parade_edit_geysir_ajax_cancel(array $form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $response->addCommand(new GeysirCloseModalDialogCommand());
  return $response;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @todo - refactor.
 */
function parade_edit_preprocess_links(&$variables) {
  if (isset($variables['attributes']['class']) && in_array('geysir-field-paragraph-links', $variables['attributes']['class'])) {
    $new_links = [];
    foreach ($variables['links'] as $key => $link) {
      $new_links[$key] = $link;
      if ('edit' === $key) {
        $my_link['links']['parade_edit-quickedit'] = [
          'title' => 'Inplace edit',
          'attributes' => [
            'class' => ['button', 'geysir-button'],
          ],
        ];
        template_preprocess_links($my_link);
        $new_links['parade_edit-quickedit'] = $my_link['links']['parade_edit-quickedit'];
      }
    }
    $variables['links'] = $new_links;
  }
}

/**
 * Implements hook_page_attachments().
 */
function parade_edit_page_attachments(array &$page) {
  $attributes = Drupal::request()->attributes;
  if (in_array($attributes->get('_route'), ['entity.node.canonical', 'entity.node.latest_version'])) {
    $page['#attached']['library'][] = 'parade_edit/tabs';
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter().
 *
 * Alter paragraphs entity view, add paragraphs_edit contextual links on
 * geysir modal roots too. It's removed by paragraphs_edit because of
 * isAdminRoute().
 *
 * @see paragraphs_edit_paragraph_view_alter()
 */
function parade_edit_paragraph_view_alter(array &$build, ParagraphInterface $entity, EntityViewDisplayInterface $display) {
  $routeName = \Drupal::routeMatch()->getRouteName();
  if (strstr($routeName, 'geysir.modal.')
  || strstr($routeName, 'parade_edit.modal.')) {
    $root_parent = \Drupal::service('paragraphs_edit.lineage.inspector')
      ->getRootParent($entity);
    if ($root_parent) {
      $build['#contextual_links']['paragraph'] = [
        'route_parameters' => [
          'root_parent_type' => $root_parent->getEntityTypeId(),
          'root_parent' => $root_parent->id(),
          'paragraph' => $entity->id(),
        ],
        'metadata' => ['changed' => $root_parent->getChangedTime()],
      ];
    }
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * Add custom prerender: contextual links with 'visually-hidden' class to hide
 * contextual menus  - pencil incons.
 */
function parade_edit_element_info_alter(array &$info) {
  $info['contextual_links_placeholder']['#pre_render'][] = [
    '\Drupal\parade_edit\Element\ParadeContextualLinksPlaceholder',
    'preRenderPlaceholder',
  ];
}