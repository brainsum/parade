<?php

/**
 * @file
 * Code for Parade Demo.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function parade_demo_theme($existing, $type, $theme, $path) {
  return [
    'page__node__parade_onepage' => [
      'base hook' => 'page',
    ],
    'field__node__parade_onepage_sections__parade_onepage' => [
      'base hook' => 'field',
    ],
    'field__paragraph__parade_title' => [
      'base hook' => 'field',
    ],
    'field__paragraph__text_boxes' => [
      'base hook' => 'field',
    ],
    'field__node__parade_onepage_menu__parade_onepage' => [
      'base hook' => 'field',
    ],
    'node__parade_onepage' => [
      'base hook' => 'node',
    ],
  ];
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Add 'field__node__parade_onepage_menu__' . $bundle theme hook depends on
 * Parade settings.
 */
function parade_demo_theme_registry_alter(&$theme_registry) {
  $bundles = array_keys(\Drupal::config('parade_demo.settings')->get('bundles'));
  // The parade_onepage is already added in hook_theme().
  unset($bundles['parade_onepage']);

  foreach ($bundles as $bundle) {
    $theme_registry['node__' . $bundle] = $theme_registry['node__parade_onepage'];
    $theme_registry['node__' . $bundle]['template'] = 'node--parade-onepage';

    $theme_registry['page__node__' . $bundle] = $theme_registry['page__node__parade_onepage'];
    $theme_registry['page__node__' . $bundle]['template'] = 'page--node--parade-onepage';

    $theme_registry['field__node__parade_onepage_menu__' . $bundle] = $theme_registry['field__node__parade_onepage_menu__parade_onepage'];
    $theme_registry['field__node__parade_onepage_menu__' . $bundle]['template'] = 'field--node--parade-onepage-menu--parade-onepage';

    $theme_registry['field__node__parade_onepage_sections__' . $bundle] = $theme_registry['field__node__parade_onepage_sections__parade_onepage'];
    $theme_registry['field__node__parade_onepage_sections__' . $bundle]['template'] = 'field--node--parade-onepage-sections--parade-onepage';
  }
}

/**
 * Implements hook_page_attachments().
 */
function parade_demo_page_attachments(array &$page) {
  $attributes = Drupal::request()->attributes;
  if ($attributes->has('node') &&  $attributes->get('_route') === 'entity.node.canonical') {
    $bundles = \Drupal::config('parade_demo.settings')->get('bundles');
    if (in_array($attributes->get('node')->getType(), array_keys($bundles))) {
      $page['#attached']['library'][] = 'parade_demo/parade_onepage_js';
      $bundle_settings = $bundles[$attributes->get('node')->getType()];
      if (!isset($bundle_settings['css_disabled']) || !$bundle_settings['css_disabled']) {
        $page['#attached']['library'][] = 'parade_demo/parade_demo_css';
      }
      $page['#attached']['library'][] = 'parade_demo/scrollspy';
      $page['#attached']['library'][] = 'parade_demo/responsive_tabs';
      $page['#attached']['library'][] = 'parade_demo/smooth-scroll';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function parade_demo_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $attach = $css_disabled = FALSE;
  $bundles = \Drupal::config('parade_demo.settings')->get('bundles');
  foreach ($bundles as $bundle => $data) {
    if (!$attach && in_array($form_id, ['node_' . $bundle . '_form', 'node_' . $bundle . '_edit_form'], FALSE)) {
      $attach = TRUE;
      if (isset($data['css_disabled']) && $data['css_disabled']) {
        $css_disabled = TRUE;
      }
    }
  }
  if ($attach) {
    $form['#attributes']['class'][] = 'node-parade-onepage-form';
    // @todo css refactor needed - custom class instead of node type class.
    $form['#attributes']['class'][] = 'node-parade-onepage-edit-form';
    if (!$css_disabled) {
      $form['#attached']['library'][] = 'parade_demo/parade_demo_css';
    }
    $form['#attached']['library'][] = 'parade_demo/parade_demo_admin_css';
    $form['#attached']['library'][] = 'parade_demo/parade_onepage_js';
    $form['#attached']['library'][] = 'parade_demo/scrollspy';
    $form['#attached']['library'][] = 'parade_demo/responsive_tabs';
    $form['#attached']['library'][] = 'parade_demo/smooth-scroll';

    $form['parade_onepage_menu']['widget']['add_more']['#value'] = t('Add menu link');
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function parade_demo_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  // @fixme check for field Type, not name.
  // @todo also check for Parade content type!
  $field_name = $context['items']->getFieldDefinition()->getName();

  // Change dropbuttons to normal list in Paragraphs inline forms.
  if (in_array($field_name, ['parade_onepage_sections', 'parade_paragraphs'])) {
    unset($element['top']['links']['#theme_wrappers']);
    $element['top']['links']['prefix']['#markup'] = '<ul class="parade-actions">';
  }

  // Changes to Menu field.
  if ($field_name === 'parade_onepage_menu') {
    $element['uri']['#description'] = NULL;
    $element['uri']['#title_display'] = 'none';
    $element['title']['#title_display'] = 'none';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function parade_demo_preprocess_html(&$variables) {
  // If on a node add or edit page, add a node-layout class.
  $path_args = explode('/', Drupal::request()->getPathInfo());
  if ($suggestions = theme_get_suggestions($path_args, 'page', '-')) {
    foreach ($suggestions as $suggestion) {
      if ($suggestion === 'page-node-edit' || strpos($suggestion, 'page-node-add') !== FALSE) {
        $variables['attributes']['class'][] = 'node-form-layout';
      }
    }
  }

  // Add custom class to body for node add/edit page.
  // @todo css refactor needed - custom class instead of node type class.
  $route_name = Drupal::request()->attributes->get('_route');
  $route_match = \Drupal::routeMatch();
  $type = NULL;
  if ('entity.node.edit_form' === $route_name) {
    $type = $route_match->getParameter('node')->getType();
  }
  if ('node.add' === $route_name) {
    $type = $route_match->getParameter('node_type')->get('type');
  }
  if ($type) {
    $bundles = array_keys(\Drupal::config('parade_demo.settings')->get('bundles'));
    if (in_array($type, $bundles)) {
      $variables['attributes']['class'][] = 'page-node-type-parade-onepage';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function parade_demo_preprocess_menu_local_action(array &$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'button--primary';
  $variables['link']['#options']['attributes']['class'][] = 'button--small';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Changes vertical tabs to container and adds meta information
 * and attach custom tabledrag library on campaign edit forms.
 */
function parade_demo_form_node_form_alter(&$form, FormStateInterface $form_state) {
  /** @var Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();

  $form['#theme'] = ['node_edit_form'];

  $form['advanced']['#type'] = 'container';
  $is_new = !$node->isNew() ? format_date($node->getChangedTime(), 'short') : t('Not saved yet');
  $form['meta'] = [
    '#attributes' => ['class' => ['entity-meta__header']],
    '#type' => 'container',
    '#group' => 'advanced',
    '#weight' => -100,
    'published' => [
      '#type' => 'html_tag',
      '#tag' => 'h3',
      '#value' => $node->isPublished() ? t('Published') : t('Not published'),
      '#access' => !$node->isNew(),
      '#attributes' => [
        'class' => 'entity-meta__title',
      ],
    ],
    'changed' => [
      '#type' => 'item',
      '#wrapper_attributes' => ['class' => ['entity-meta__last-saved', 'container-inline']],
      '#markup' => '<h4 class="label inline">' . t('Last saved') . '</h4> ' . $is_new,
    ],
    'author' => [
      '#type' => 'item',
      '#wrapper_attributes' => ['class' => ['author', 'container-inline']],
      '#markup' => '<h4 class="label inline">' . t('Author') . '</h4> ' . $node->getOwner()->getUsername(),
    ],
  ];
  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function parade_demo_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // @todo @fixme
  if (in_array('page__node__campaign', $suggestions, FALSE)) {
    $suggestions[] = 'page__node__campaign__revisions';
  }
  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function parade_demo_preprocess_field__parade_call_to_action(&$variables) {
  foreach ($variables['items'] as $key => $link) {
    if ($variables['element']['#entity_type'] === 'paragraph' && $variables['element']['#bundle'] === 'text_box') {
      $classes = ['button', 'button--green'];
    }
    else {
      $classes = ['button', 'button--primary'];
    }
    $variables['items'][$key]['content']['#options']['attributes']['class'] = $classes;
  }
}
