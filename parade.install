<?php

/**
 * @file
 * Installation file for Parade.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\field\Entity\FieldConfig;

/**
 * Changes name of 'Text and Image' to 'Text & image'.
 */
function parade_update_8101() {
  $config_factory = \Drupal::configFactory();
  $label = $config_factory->get('paragraphs.paragraphs_type.image_text')
    ->get('label');

  // Check if the site's owner doesn't renamed it by itself.
  if ($label === "Text and Image") {
    $config_factory->getEditable('paragraphs.paragraphs_type.image_text')
      ->set('label', 'Text & image')
      ->save();
  }
}

/**
 * Add description field for boxes paragraphs type.
 */
function parade_update_8102() {
  $config_factory = \Drupal::configFactory();
  $label = $config_factory->get('core.entity_form_display.paragraph.text_boxes.default')->get('content.parade_text');
  $load_desc_field = FieldConfig::loadByName('paragraph', 'text_boxes', 'parade_text');

  // Check if the field is already exist.
  if (empty($label) && empty($load_desc_field)) {
    // Connect existing field to a bundle.
    FieldConfig::create([
      'entity_type' => 'paragraph',
      'bundle'      => 'text_boxes',
      'field_name'  => 'parade_text',
    ])->save();

    $editable = $config_factory->getEditable('field.field.paragraph.text_boxes.parade_text');
    $editable
      ->set('langcode', 'en')
      ->set('status', TRUE)
      ->set('dependencies', [
        'config' => [
          'field.storage.paragraph.parade_text',
          'paragraphs.paragraphs_type.text_boxes',
        ],
        'module' => [
          'geocoder_field',
          'text',
        ],
      ])
      ->set('third_party_settings', [
        'geocoder_field' => [
          'method' => 'none',
          'field' => 'parent_id',
          'plugins' => [],
          'dumper' => 'wkt',
          'delta_handling' => 'default',
          'failure' => [
            'handling' => 'preserve',
            'status_message' => TRUE,
            'log' => TRUE,
          ],
        ],
      ])
      ->set('id', 'paragraph.text_boxes.parade_text')
      ->set('field_name', 'parade_text')
      ->set('entity_type', 'paragraph')
      ->set('bundle', 'text_boxes')
      ->set('label', 'Description')
      ->set('description', 'This text will show up above the text boxes.')
      ->set('required', FALSE)
      ->set('translatable', TRUE)
      ->set('default_value', [])
      ->set('default_value_callback', '')
      ->set('settings', [])
      ->set('field_type', 'text_long')
      ->save();

    // Set field settings in the bundle.
    $editable = $config_factory->getEditable('core.entity_form_display.paragraph.text_boxes.default');
    $dependencies = $editable->get('dependencies.config');
    $dependencies[] = 'field.field.paragraph.text_boxes.parade_text';
    $editable->set('content.parade_text', [
      'weight' => 4,
      'settings' => [
        'rows' => 5,
        'placeholder' => '',
      ],
      'third_party_settings' => [],
      'type' => 'text_textarea',
      'region' => 'content',
    ])->set('dependencies.config', $dependencies)
      ->save();

    $editable = $config_factory->getEditable('core.entity_view_display.paragraph.text_boxes.default');
    $dependencies = $editable->get('dependencies.config');
    $dependencies[] = 'field.field.paragraph.text_boxes.parade_text';
    $editable->set('content.parade_text', [
      'type' => 'text_default',
      'weight' => 1,
      'region' => 'content',
      'label' => 'hidden',
      'settings' => [],
      'third_party_settings' => [],
    ])->set('dependencies.config', $dependencies)
      ->save();
  }
}

/**
 * Helper function for returning the chart box types.
 *
 * @return array
 *   The configs.
 */
function _get_parade_chart_box_configs() {
  return [
    'paragraphs.paragraphs_type.chart_box',
    'field.storage.paragraph.parade_value',
    'field.field.paragraph.chart_box.parade_text',
    'field.field.paragraph.chart_box.parade_title',
    'field.field.paragraph.chart_box.parade_value',
    'core.entity_form_display.paragraph.chart_box.default',
    'core.entity_view_display.paragraph.chart_box.default',
    'core.entity_view_display.paragraph.chart_box.custom',
    'core.entity_view_display.paragraph.chart_box.preview',
  ];
}

/**
 * Import 'chart_box' type related config.
 */
function parade_update_8201() {
  $configPath = drupal_get_path('module', 'parade') . '/config/optional';
  $source = new FileStorage($configPath);
  /** @var Drupal\Core\Config\CachedStorage $configStorage */
  $configStorage = \Drupal::service('config.storage');

  foreach (_get_parade_chart_box_configs() as $boxConfig) {
    $configStorage->write($boxConfig, $source->read($boxConfig));
  }
}

/**
 * Fix chart_box type config UUIDs, if needed.
 */
function parade_update_8202() {
  /** @var \Drupal\Component\Uuid\Php $uuidService */
  $uuidService = \Drupal::service('uuid');
  /** @var Drupal\Core\Config\CachedStorage $configStorage */
  $configStorage = \Drupal::service('config.storage');

  foreach (_get_parade_chart_box_configs() as $boxConfig) {
    $config = $configStorage->read($boxConfig);

    if (empty($config['uuid'])) {
      $config = ['uuid' => $uuidService->generate()] + $config;
      $configStorage->write($boxConfig, $config);
    }
  }
}

/**
 * Disable the image optimize modules.
 */
function parade_update_8203() {
  $modules = ['image_optimalization', 'parade_image_optimize'];

  $database = \Drupal::database();
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $moduleInstaller */
  $moduleInstaller = \Drupal::service('module_installer');

  foreach ($modules as $module) {
    // Try to uninstall the modules.
    // If it fails, clean up possible stuck ones.
    if (FALSE === $moduleInstaller->uninstall([$module])) {
      $database->delete('key_value')
        ->condition('collection', 'system.schema')
        ->condition('name', $module)
        ->execute();
    }
  }
}

/**
 * Add new option (add_text_needed) default value.
 */
function parade_update_8204() {
  $config_factory = \Drupal::configFactory();
  $config_factory->getEditable('core.entity_form_display.paragraph.text_boxes.default')
    ->set('content.parade_paragraphs.settings.add_text_needed', '1')
    ->save();
}
